#!/usr/bin/env python3

import argparse
from pathlib import Path
from os import path;
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By

PARSER = argparse.ArgumentParser(
    prog="./start", description="Scaffold a new Advent of Code solution"
)
PARSER.add_argument(
    "day",
    type=int,
    help=(
        "Which puzzle day to start, between [1,25]."
        " Defaults to the next day without a folder (matching `day_N`) in that year."
    ),
    nargs="?",
)

if __name__ == "__main__":
    ARGS = PARSER.parse_args()

    day = ARGS.day

    if not 1 <= day <= 25:
        PARSER.error(f"day {day} is not in range [1,25]")

    day_dir = Path("solutions", f"day{day:02}")

    day_dir.mkdir(parents=True, exist_ok=True)

    # bgn get input ##############

    with open('.env') as f: aoc_session = f.read()

    chrome_options = Options()
    chrome_options.add_argument("--headless")

    # Replace value with your session cookie for AoC
    session_cookie = {"name": "session", "value": aoc_session}

    # initialize driver object and change the <path_to_chrome_driver> depending on your directory where your chromedriver should be
    # https://www.kenst.com/installing-chromedriver-on-mac-osx/
    driver = webdriver.Chrome(options=chrome_options, executable_path="/opt/homebrew/bin/chromedriver")

    # URLs we need
    url = "https://adventofcode.com/2024/day/"
    url_input = "https://adventofcode.com/2024/day/" + day.__str__() + "/input"

    # get request to target the site selenium is active on, add our cookies and go to input
    driver.get(url)
    driver.add_cookie(session_cookie)
    driver.get(url_input)

    # Find our text input on the input page, "pre" is our tag ID
    content = driver.find_element(By.TAG_NAME, "pre").text    

    input_path = Path(day_dir, "input.txt")

    # Save content to file
    if path.exists(input_path): 
        open(input_path, 'w').close() # always overwrite
    f = open(input_path, "a")
    for line in content:
        f.write(line)
    f.close()
    # Remember to quit the driver
    driver.quit()

    # end get input ##############

    solution_path = Path(day_dir, "solution.py")
    tests_path = Path(day_dir, "tests.py")

    if solution_path.exists():
        # if we're here, it's probably a re-run
        print("ensuring input files exist")
        print("skipping solution creation, file already exists")
    else:
        template = Path("misc/example_solution.py.tmpl").read_text()
        replaced_template = template.replace("<YEAR>", "2024").replace("<DAY>", str(day))
        solution_path.write_text(replaced_template)
        print("Created a new Solution file at", solution_path)

        template = Path("misc/tests.py.tmpl").read_text()
        tests_path.write_text(template)
        print("Created a new Test file at", tests_path)